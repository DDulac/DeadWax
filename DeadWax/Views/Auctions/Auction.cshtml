
@model DeadWax.Models.Auction

@{ 
    //Passing data Example 1
    //It is wrong to instantiate objects directly in the view, instead instantiate objects in the controller and pass it to the view as ViewData Dictionary or ViewBag
    //Instantiate and populating an auction object
    //var auction = new DeadWax.Models.Auction()
    //{
    //    Title = "Example Auction",
    //    Description = "This is an example Auction",
    //    StartTime = DateTime.Now,
    //    EndTime = DateTime.Now.AddDays(7),
    //    StartPrice = 1.00m,
    //    CurrentPrice = null,
    //};

    //Passing data Example 2 "ViewData"
    //Instantiation is been moved to the views controller
    //using ViewData Dictionary (exposes everything as an object as it is not strongly typed)
    //Retrieve and cast the auction object from the Auction action of the AuctionsController
    //var auction = (DeadWax.Models.Auction)ViewData["Auction"];

    //Passing data Example 3 "ViewBag"
    //Instantiation is still done in the views controller
    //Using the ViewBag and exposing the data as dynamic objects, this eliminates the need to cast to a type like with ViewData Dictionary
    //var auction = ViewBag.Auction;

    //Passing data Example 4 "Model"
    //Using the view helper method
    //Instantiation is still done in the views controller
    //Add a fully qualified reference to the model object as a page directive (see @model DeadWax.Models.Auction at top of page)
    var auction = Model;
}

<!-- HTML Helper Example 1: injects the path (/Account/Login) to the login page as the href value-->
<!--<a href="@Url.Action("login", "Account")">Login</a>-->
<!-- HTML Helper Example 2: injects the whole html markup and the path-->
@Html.ActionLink("Login", "Login", "Account")

<div class="auction">
    <h3>@auction.Title</h3>
    <div class="details">
        <p>Start Time: @auction.StartTime.ToString("g")</p>
        <p>End Time: @auction.EndTime.ToString("g")</p>
        <p>Starting Price: @auction.StartPrice.ToString("C")</p>

        @*
            Since CurrentPrice is nullable we have to check to 
            see if it has a value before we can call .ToString()!
        *@

        <p>Current Price:
            @if(auction.CurrentPrice == null)
            {
                @: [No bids]
            }
            else
            {
                <span>@auction.CurrentPrice.Value.ToString("C")</span>
            }
        </p>
    </div>

    @if(auction.ImageURL != null)
    {
        <img src="@auction.ImageURL" title="@auction.Title" />
    }

    <div class="description">
        @auction.Description
    </div>
</div>

