@model IEnumerable<DeadWax.Models.Auction>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<!--Switch from a static table to a partial page
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ImageURL)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StartTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EndTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StartPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CurrentPrice)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Title)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ImageURL)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StartTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EndTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StartPrice)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CurrentPrice)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.AuctionId }) |
            @Html.ActionLink("Details", "Details", new { id=item.AuctionId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.AuctionId })
        </td>
    </tr>
}

</table>
-->

@foreach ( var item in Model)
{
    //The _AuctionTile partial page is not setup to hand a list of items, so use the method overload that accepts the current item in the loop
    @Html.Partial("_AuctionTile", item)
}